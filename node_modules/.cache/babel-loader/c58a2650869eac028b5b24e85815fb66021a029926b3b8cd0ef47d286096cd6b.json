{"ast":null,"code":"import axios from\"axios\";export let ServerIP=\"Searching for server IP..\";const FindInServerIp=()=>{//---IP위치정보\naxios.get(\"https://freegeoip.app/json/\").then(data=>{const ipPart=data.data.ip(\".\");//---IP추론\nconst ipTool=`http://${ipPart[0]}.${ipPart[1]}.${ipPart[2]}`;console.log(ipPart);for(let i=1;i<255;i++){const testIP=`${ipTool}.${i}:1234`;axios.get(testIP+'/test').then(response=>{if(response.data===\"Find!\"){console.log(`Find Server IP!`);// fetch(testIP+'/test', {\n//     method:\"POST\",\n//     mode:\"cors\",\n//     headers: { 'Content-Type': 'application/json' },\n//     body: testIP\n// }).then((res) => {})\n//     .catch((err) => {})\nServerIP=testIP;return 0;}}).catch(err=>{});}console.log(\"Server not found.  :C\");}).catch(err=>console.log(\"현제 로컬 호스트에서 실행불가\"));};FindInServerIp();","map":{"version":3,"names":["axios","ServerIP","FindInServerIp","get","then","data","ipPart","ip","ipTool","console","log","i","testIP","response","catch","err"],"sources":["C:/Users/park0/Desktop/miniGamesProject/mgp-app/src/findServerIP.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport let ServerIP:any = \"Searching for server IP..\";\r\n\r\nconst FindInServerIp = () => {\r\n    //---IP위치정보\r\n    axios.get(\"https://freegeoip.app/json/\").then((data) => {\r\n        const ipPart = data.data.ip(\".\");\r\n\r\n        //---IP추론\r\n        const ipTool = `http://${ipPart[0]}.${ipPart[1]}.${ipPart[2]}`;\r\n        console.log(ipPart)\r\n\r\n        for(let i = 1; i < 255; i++){\r\n            const testIP = `${ipTool}.${i}:1234`;\r\n    \r\n            axios.get(testIP+'/test').then((response) => {\r\n                if (response.data === \"Find!\") {\r\n                    console.log(`Find Server IP!`);\r\n    \r\n                    // fetch(testIP+'/test', {\r\n                    //     method:\"POST\",\r\n                    //     mode:\"cors\",\r\n                    //     headers: { 'Content-Type': 'application/json' },\r\n                    //     body: testIP\r\n                    // }).then((res) => {})\r\n                    //     .catch((err) => {})\r\n\r\n                    ServerIP = testIP;\r\n                    return 0;\r\n                }\r\n            }).catch((err) => {\r\n                \r\n            })\r\n        }\r\n        console.log(\"Server not found.  :C\")\r\n    }).catch((err)=>console.log(\"현제 로컬 호스트에서 실행불가\"))\r\n} \r\n\r\nFindInServerIp()"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAGzB,MAAO,IAAI,CAAAC,QAAY,CAAG,2BAA2B,CAErD,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CACzB;AACAF,KAAK,CAACG,GAAG,CAAC,6BAA6B,CAAC,CAACC,IAAI,CAAEC,IAAI,EAAK,CACpD,KAAM,CAAAC,MAAM,CAAGD,IAAI,CAACA,IAAI,CAACE,EAAE,CAAC,GAAG,CAAC,CAEhC;AACA,KAAM,CAAAC,MAAM,CAAG,UAAUF,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,EAAE,CAC9DG,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC,CAEnB,IAAI,GAAI,CAAAK,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,GAAG,CAAEA,CAAC,EAAE,CAAC,CACxB,KAAM,CAAAC,MAAM,CAAG,GAAGJ,MAAM,IAAIG,CAAC,OAAO,CAEpCX,KAAK,CAACG,GAAG,CAACS,MAAM,CAAC,OAAO,CAAC,CAACR,IAAI,CAAES,QAAQ,EAAK,CACzC,GAAIA,QAAQ,CAACR,IAAI,GAAK,OAAO,CAAE,CAC3BI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AAEAT,QAAQ,CAAGW,MAAM,CACjB,MAAO,EAAC,CACZ,CACJ,CAAC,CAAC,CAACE,KAAK,CAAEC,GAAG,EAAK,CAElB,CAAC,CAAC,CACN,CACAN,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CACxC,CAAC,CAAC,CAACI,KAAK,CAAEC,GAAG,EAAGN,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CACpD,CAAC,CAEDR,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}