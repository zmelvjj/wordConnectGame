{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\park0\\\\Desktop\\\\miniGamesProject\\\\mgp-app\\\\src\\\\Main.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n// import bonjour from \"bonjour\";\nimport \"./Main.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [data, setData] = useState([\"\", 0]);\n  const navigate = useNavigate();\n\n  // useEffect(() => {\n  //     const a = bonjour()\n\n  //     a.find({type:'http'}, service =>{\n  //         if (service.name === \"miniGames NodeServer\"){\n  //             const serverURI = `http://${service.host}:${service.port}/getData`\n\n  //             fetch(serverURI, {method: \"POST\", mode: \"cors\",\n  //                 headers: {\n  //                 'Content-Type': 'application/json',\n  //                 },\n  //                 body: JSON.stringify({ request: \"getData\" }) // JSON 형식으로 수정\n  //             })\n  //                 .then((res) => res.json())\n  //                 .then((Data) => {\n  //                     const targetData = Data[UserName];\n  //                     console.log(UserName);\n  //                     setData([targetData.Username, targetData.Point]);\n  //                 })\n  //                 .catch((err) => {\n  //                     console.error(\"ERROR:\", err);\n  //                 });\n  //         }\n  //     })\n  // }, []);\n\n  // const mainData = async () => {\n  //     const chagePageinMain = (fetch:string) => {\n  //         navigate('/'+fetch); //경로 이동\n\n  //     };\n\n  //     try {\n  //         const res = await fetch(\"http://localhost:1234/getData\", {\n  //             method: \"POST\",\n  //             mode: \"cors\",\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({ request: \"getData\" }) // JSON 형식으로 수정\n  //         });\n\n  //         const Data = await res.json();\n\n  //         //-----순위 정렬화--------\n  //         // const userArray = Object.keys(Data).map(key => ({\n  //         //     ...Data[key],\n  //         //     rank: 0, // 초기 순위\n  //         // }));\n\n  //         // // 점수에 따라 배열 정렬\n  //         // userArray.sort((a, b) => b.Point - a.Point);\n\n  //         // // 순위 매기기\n  //         // userArray.forEach((user, index) => {\n  //         //     user.rank = index + 1;\n  //         //     Setdata([user.Username,user.rank])\n  //         // });\n  //         // const targetData = Data[UserName]\n  //         // console.log(UserName)\n  //         // Setdata([targetData.Username,targetData.Point])\n\n  //     } catch (err) {\n  //         console.log(\"ERROR:\", err);\n  //     }\n  // };\n\n  // useEffect(() => {\n  //     mainData();\n  // }, []); // 빈 배열을 두 번째 인자로 전달하여 컴포넌트가 마운트될 때 한 번만 실행되도록 함\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"scoreBorde\",\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [data[0], \"\\uC810\\uC218:\", data[2]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"2KCBBGC4OAMuo+gwQij4eAmHMPA=\", false, function () {\n  return [useNavigate];\n});\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Main","_s","data","setData","navigate","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/park0/Desktop/miniGamesProject/mgp-app/src/Main.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {UserName} from './App';\r\n// import bonjour from \"bonjour\";\r\nimport \"./Main.css\"\r\n\r\nconst Main: React.FC = () => {\r\n    const [data,setData] = useState([\"\",0]);\r\n    const navigate = useNavigate();\r\n\r\n    // useEffect(() => {\r\n    //     const a = bonjour()\r\n\r\n    //     a.find({type:'http'}, service =>{\r\n    //         if (service.name === \"miniGames NodeServer\"){\r\n    //             const serverURI = `http://${service.host}:${service.port}/getData`\r\n\r\n    //             fetch(serverURI, {method: \"POST\", mode: \"cors\",\r\n    //                 headers: {\r\n    //                 'Content-Type': 'application/json',\r\n    //                 },\r\n    //                 body: JSON.stringify({ request: \"getData\" }) // JSON 형식으로 수정\r\n    //             })\r\n    //                 .then((res) => res.json())\r\n    //                 .then((Data) => {\r\n    //                     const targetData = Data[UserName];\r\n    //                     console.log(UserName);\r\n    //                     setData([targetData.Username, targetData.Point]);\r\n    //                 })\r\n    //                 .catch((err) => {\r\n    //                     console.error(\"ERROR:\", err);\r\n    //                 });\r\n    //         }\r\n    //     })\r\n    // }, []);\r\n\r\n\r\n    // const mainData = async () => {\r\n    //     const chagePageinMain = (fetch:string) => {\r\n    //         navigate('/'+fetch); //경로 이동\r\n            \r\n    //     };\r\n\r\n    //     try {\r\n    //         const res = await fetch(\"http://localhost:1234/getData\", {\r\n    //             method: \"POST\",\r\n    //             mode: \"cors\",\r\n    //             headers: {\r\n    //                 'Content-Type': 'application/json',\r\n    //             },\r\n    //             body: JSON.stringify({ request: \"getData\" }) // JSON 형식으로 수정\r\n    //         });\r\n\r\n    //         const Data = await res.json();\r\n            \r\n    //         //-----순위 정렬화--------\r\n    //         // const userArray = Object.keys(Data).map(key => ({\r\n    //         //     ...Data[key],\r\n    //         //     rank: 0, // 초기 순위\r\n    //         // }));\r\n            \r\n    //         // // 점수에 따라 배열 정렬\r\n    //         // userArray.sort((a, b) => b.Point - a.Point);\r\n            \r\n    //         // // 순위 매기기\r\n    //         // userArray.forEach((user, index) => {\r\n    //         //     user.rank = index + 1;\r\n    //         //     Setdata([user.Username,user.rank])\r\n    //         // });\r\n    //         // const targetData = Data[UserName]\r\n    //         // console.log(UserName)\r\n    //         // Setdata([targetData.Username,targetData.Point])\r\n\r\n    //     } catch (err) {\r\n    //         console.log(\"ERROR:\", err);\r\n    //     }\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     mainData();\r\n    // }, []); // 빈 배열을 두 번째 인자로 전달하여 컴포넌트가 마운트될 때 한 번만 실행되도록 함\r\n\r\n    return (\r\n        <div className=\"background\">\r\n            <h1 id=\"scoreBorde\"><pre>\r\n                {data[0]}\r\n                점수:{data[2]}\r\n            </pre></h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;"],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAE9C;AACA,OAAO,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,IAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC;EACvC,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;;EAE9B;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACIE,OAAA;IAAKM,SAAS,EAAC,YAAY;IAAAC,QAAA,eACvBP,OAAA;MAAIQ,EAAE,EAAC,YAAY;MAAAD,QAAA,eAACP,OAAA;QAAAO,QAAA,GACfJ,IAAI,CAAC,CAAC,CAAC,EAAC,eACN,EAACA,IAAI,CAAC,CAAC,CAAC;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEd,CAAC;AAACV,EAAA,CApFID,IAAc;EAAA,QAECH,WAAW;AAAA;AAAAe,EAAA,GAF1BZ,IAAc;AAsFpB,eAAeA,IAAI;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}