{"ast":null,"code":"import axios from \"axios\";\nexport const findServerInNetwork = async () => {\n  //---IP위치정보\n  axios.get(\"https://freegeoip.app/json/\").then(data => {\n    const ipPart = data.data.ip(\".\");\n\n    //---IP추론\n    const ipTool = `http://${ipPart[0]}.${ipPart[1]}.${ipPart[2]}`;\n    console.log(ipPart);\n    for (let i = 1; i < 255; i++) {\n      const testIP = `${ipTool}.${i}:1234`;\n      axios.get(testIP + '/test').then(response => {\n        if (response.data === \"Find!\") {\n          console.log(`Find Server IP!`);\n\n          // fetch(testIP+'/test', {\n          //     method:\"POST\",\n          //     mode:\"cors\",\n          //     headers: { 'Content-Type': 'application/json' },\n          //     body: testIP\n          // }).then((res) => {})\n          //     .catch((err) => {})\n          return testIP; // 서버의 IP를 반환\n        }\n      }).catch(err => {});\n    }\n    console.log(\"Server not found.  :C\");\n  }).catch(err => console.log(\"애러:C  err\"));\n};","map":{"version":3,"names":["axios","findServerInNetwork","get","then","data","ipPart","ip","ipTool","console","log","i","testIP","response","catch","err"],"sources":["C:/Users/park0/Desktop/miniGamesProject/mgp-app/src/findServerIP.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport const findServerInNetwork = async () => {\r\n\r\n    //---IP위치정보\r\n    axios.get(\"https://freegeoip.app/json/\").then((data) => {\r\n        const ipPart = data.data.ip(\".\");\r\n\r\n        //---IP추론\r\n        const ipTool = `http://${ipPart[0]}.${ipPart[1]}.${ipPart[2]}`;\r\n        console.log(ipPart)\r\n\r\n        for(let i = 1; i < 255; i++){\r\n            const testIP = `${ipTool}.${i}:1234`;\r\n    \r\n            axios.get(testIP+'/test').then((response) => {\r\n                if (response.data === \"Find!\") {\r\n                    console.log(`Find Server IP!`);\r\n    \r\n                    // fetch(testIP+'/test', {\r\n                    //     method:\"POST\",\r\n                    //     mode:\"cors\",\r\n                    //     headers: { 'Content-Type': 'application/json' },\r\n                    //     body: testIP\r\n                    // }).then((res) => {})\r\n                    //     .catch((err) => {})\r\n                    return testIP; // 서버의 IP를 반환\r\n                }\r\n            }).catch((err) => {\r\n                \r\n            })\r\n        }\r\n        console.log(\"Server not found.  :C\")\r\n    }).catch((err)=>console.log(\"애러:C  err\"))\r\n} "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAE3C;EACAD,KAAK,CAACE,GAAG,CAAC,6BAA6B,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAK;IACpD,MAAMC,MAAM,GAAGD,IAAI,CAACA,IAAI,CAACE,EAAE,CAAC,GAAG,CAAC;;IAEhC;IACA,MAAMC,MAAM,GAAG,UAAUF,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,EAAE;IAC9DG,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;IAEnB,KAAI,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAC;MACxB,MAAMC,MAAM,GAAG,GAAGJ,MAAM,IAAIG,CAAC,OAAO;MAEpCV,KAAK,CAACE,GAAG,CAACS,MAAM,GAAC,OAAO,CAAC,CAACR,IAAI,CAAES,QAAQ,IAAK;QACzC,IAAIA,QAAQ,CAACR,IAAI,KAAK,OAAO,EAAE;UAC3BI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;;UAE9B;UACA;UACA;UACA;UACA;UACA;UACA;UACA,OAAOE,MAAM,CAAC,CAAC;QACnB;MACJ,CAAC,CAAC,CAACE,KAAK,CAAEC,GAAG,IAAK,CAElB,CAAC,CAAC;IACN;IACAN,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACxC,CAAC,CAAC,CAACI,KAAK,CAAEC,GAAG,IAAGN,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC,CAAC;AAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}