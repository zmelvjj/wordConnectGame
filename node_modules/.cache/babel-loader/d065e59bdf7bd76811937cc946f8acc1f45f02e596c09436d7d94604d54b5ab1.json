{"ast":null,"code":"import React,{useState}from\"react\";import{useNavigate}from\"react-router-dom\";// import bonjour from \"bonjour\";\nimport\"./Main.css\";import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const Main=()=>{const[data,setData]=useState([\"\",0]);const navigate=useNavigate();// useEffect(() => {\n//     const a = bonjour()\n//     a.find({type:'http'}, service =>{\n//         if (service.name === \"miniGames NodeServer\"){\n//             const serverURI = `http://${service.host}:${service.port}/getData`\n//             fetch(serverURI, {method: \"POST\", mode: \"cors\",\n//                 headers: {\n//                 'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ request: \"getData\" }) // JSON 형식으로 수정\n//             })\n//                 .then((res) => res.json())\n//                 .then((Data) => {\n//                     const targetData = Data[UserName];\n//                     console.log(UserName);\n//                     setData([targetData.Username, targetData.Point]);\n//                 })\n//                 .catch((err) => {\n//                     console.error(\"ERROR:\", err);\n//                 });\n//         }\n//     })\n// }, []);\n// const mainData = async () => {\n//     const chagePageinMain = (fetch:string) => {\n//         navigate('/'+fetch); //경로 이동\n//     };\n//     try {\n//         const res = await fetch(\"http://localhost:1234/getData\", {\n//             method: \"POST\",\n//             mode: \"cors\",\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ request: \"getData\" }) // JSON 형식으로 수정\n//         });\n//         const Data = await res.json();\n//         //-----순위 정렬화--------\n//         // const userArray = Object.keys(Data).map(key => ({\n//         //     ...Data[key],\n//         //     rank: 0, // 초기 순위\n//         // }));\n//         // // 점수에 따라 배열 정렬\n//         // userArray.sort((a, b) => b.Point - a.Point);\n//         // // 순위 매기기\n//         // userArray.forEach((user, index) => {\n//         //     user.rank = index + 1;\n//         //     Setdata([user.Username,user.rank])\n//         // });\n//         // const targetData = Data[UserName]\n//         // console.log(UserName)\n//         // Setdata([targetData.Username,targetData.Point])\n//     } catch (err) {\n//         console.log(\"ERROR:\", err);\n//     }\n// };\n// useEffect(() => {\n//     mainData();\n// }, []); // 빈 배열을 두 번째 인자로 전달하여 컴포넌트가 마운트될 때 한 번만 실행되도록 함\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"background\",children:/*#__PURE__*/_jsx(\"h1\",{id:\"scoreBorde\",children:/*#__PURE__*/_jsxs(\"pre\",{children:[data[0],\"\\uC810\\uC218:\",data[2]]})})});};export default Main;","map":{"version":3,"names":["React","useState","useNavigate","jsxs","_jsxs","jsx","_jsx","Main","data","setData","navigate","className","children","id"],"sources":["C:/Users/park0/Desktop/miniGamesProject/mgp-app/src/Main.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {UserName} from './App';\r\n// import bonjour from \"bonjour\";\r\nimport \"./Main.css\"\r\n\r\nconst Main: React.FC = () => {\r\n    const [data,setData] = useState([\"\",0]);\r\n    const navigate = useNavigate();\r\n\r\n    // useEffect(() => {\r\n    //     const a = bonjour()\r\n\r\n    //     a.find({type:'http'}, service =>{\r\n    //         if (service.name === \"miniGames NodeServer\"){\r\n    //             const serverURI = `http://${service.host}:${service.port}/getData`\r\n\r\n    //             fetch(serverURI, {method: \"POST\", mode: \"cors\",\r\n    //                 headers: {\r\n    //                 'Content-Type': 'application/json',\r\n    //                 },\r\n    //                 body: JSON.stringify({ request: \"getData\" }) // JSON 형식으로 수정\r\n    //             })\r\n    //                 .then((res) => res.json())\r\n    //                 .then((Data) => {\r\n    //                     const targetData = Data[UserName];\r\n    //                     console.log(UserName);\r\n    //                     setData([targetData.Username, targetData.Point]);\r\n    //                 })\r\n    //                 .catch((err) => {\r\n    //                     console.error(\"ERROR:\", err);\r\n    //                 });\r\n    //         }\r\n    //     })\r\n    // }, []);\r\n\r\n\r\n    // const mainData = async () => {\r\n    //     const chagePageinMain = (fetch:string) => {\r\n    //         navigate('/'+fetch); //경로 이동\r\n            \r\n    //     };\r\n\r\n    //     try {\r\n    //         const res = await fetch(\"http://localhost:1234/getData\", {\r\n    //             method: \"POST\",\r\n    //             mode: \"cors\",\r\n    //             headers: {\r\n    //                 'Content-Type': 'application/json',\r\n    //             },\r\n    //             body: JSON.stringify({ request: \"getData\" }) // JSON 형식으로 수정\r\n    //         });\r\n\r\n    //         const Data = await res.json();\r\n            \r\n    //         //-----순위 정렬화--------\r\n    //         // const userArray = Object.keys(Data).map(key => ({\r\n    //         //     ...Data[key],\r\n    //         //     rank: 0, // 초기 순위\r\n    //         // }));\r\n            \r\n    //         // // 점수에 따라 배열 정렬\r\n    //         // userArray.sort((a, b) => b.Point - a.Point);\r\n            \r\n    //         // // 순위 매기기\r\n    //         // userArray.forEach((user, index) => {\r\n    //         //     user.rank = index + 1;\r\n    //         //     Setdata([user.Username,user.rank])\r\n    //         // });\r\n    //         // const targetData = Data[UserName]\r\n    //         // console.log(UserName)\r\n    //         // Setdata([targetData.Username,targetData.Point])\r\n\r\n    //     } catch (err) {\r\n    //         console.log(\"ERROR:\", err);\r\n    //     }\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     mainData();\r\n    // }, []); // 빈 배열을 두 번째 인자로 전달하여 컴포넌트가 마운트될 때 한 번만 실행되도록 함\r\n\r\n    return (\r\n        <div className=\"background\">\r\n            <h1 id=\"scoreBorde\"><pre>\r\n                {data[0]}\r\n                점수:{data[2]}\r\n            </pre></h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAeC,QAAQ,KAAQ,OAAO,CAClD,OAASC,WAAW,KAAQ,kBAAkB,CAE9C;AACA,MAAO,YAAY,QAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,yBAEnB,KAAM,CAAAC,IAAc,CAAGA,CAAA,GAAM,CACzB,KAAM,CAACC,IAAI,CAACC,OAAO,CAAC,CAAGR,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACvC,KAAM,CAAAS,QAAQ,CAAGR,WAAW,CAAC,CAAC,CAE9B;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,mBACII,IAAA,QAAKK,SAAS,CAAC,YAAY,CAAAC,QAAA,cACvBN,IAAA,OAAIO,EAAE,CAAC,YAAY,CAAAD,QAAA,cAACR,KAAA,QAAAQ,QAAA,EACfJ,IAAI,CAAC,CAAC,CAAC,CAAC,eACN,CAACA,IAAI,CAAC,CAAC,CAAC,EACV,CAAC,CAAI,CAAC,CACV,CAAC,CAEd,CAAC,CAED,cAAe,CAAAD,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}