{"ast":null,"code":"import axios from \"axios\";\nexport const findServerInNetwork = async () => {\n  const ipPart = window.location.hostname.split(\".\");\n\n  //---IP위치정보\n  const ip = axios.get(\"https://freegeoip.app/json/\").then(data => {\n    return data.data.ip;\n  }).catch(err => console.log(\"애러:C  err\"));\n  console.log(ip);\n\n  //---IP추론\n  const ipTool = `http://${ipPart[0]}.${ipPart[1]}.${ipPart[2]}`;\n  console.log(ipPart);\n  for (let i = 1; i < 255; i++) {\n    const testIP = `${ipTool}.${i}:1234`;\n    axios.get(testIP + '/test').then(response => {\n      if (response.data === \"Find!\") {\n        console.log(`Find Server IP!`);\n\n        // fetch(testIP+'/test', {\n        //     method:\"POST\",\n        //     mode:\"cors\",\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: testIP\n        // }).then((res) => {})\n        //     .catch((err) => {})\n        return testIP; // 서버의 IP를 반환\n      }\n    }).catch(err => {});\n  }\n  console.log(\"Server not found.  :C\");\n  return null;\n};","map":{"version":3,"names":["axios","findServerInNetwork","ipPart","window","location","hostname","split","ip","get","then","data","catch","err","console","log","ipTool","i","testIP","response"],"sources":["C:/Users/park0/Desktop/miniGamesProject/mgp-app/src/findServerIP.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const findServerInNetwork = async () => {\r\n    const ipPart = window.location.hostname.split(\".\");\r\n\r\n    //---IP위치정보\r\n    const ip = axios.get(\"https://freegeoip.app/json/\").then((data) => {return data.data.ip}).catch((err)=>console.log(\"애러:C  err\"))\r\n    console.log(ip)\r\n\r\n    //---IP추론\r\n    const ipTool = `http://${ipPart[0]}.${ipPart[1]}.${ipPart[2]}`;\r\n    \r\n    console.log(ipPart)\r\n    for(let i = 1; i < 255; i++){\r\n        const testIP = `${ipTool}.${i}:1234`;\r\n\r\n        axios.get(testIP+'/test').then((response) => {\r\n            if (response.data === \"Find!\") {\r\n                console.log(`Find Server IP!`);\r\n\r\n                // fetch(testIP+'/test', {\r\n                //     method:\"POST\",\r\n                //     mode:\"cors\",\r\n                //     headers: { 'Content-Type': 'application/json' },\r\n                //     body: testIP\r\n                // }).then((res) => {})\r\n                //     .catch((err) => {})\r\n                return testIP; // 서버의 IP를 반환\r\n            }\r\n        }).catch((err) => {\r\n            \r\n        })\r\n    }\r\n    console.log(\"Server not found.  :C\")\r\n    return null;\r\n} "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC3C,MAAMC,MAAM,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;;EAElD;EACA,MAAMC,EAAE,GAAGP,KAAK,CAACQ,GAAG,CAAC,6BAA6B,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAK;IAAC,OAAOA,IAAI,CAACA,IAAI,CAACH,EAAE;EAAA,CAAC,CAAC,CAACI,KAAK,CAAEC,GAAG,IAAGC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC,CAAC;EAChID,OAAO,CAACC,GAAG,CAACP,EAAE,CAAC;;EAEf;EACA,MAAMQ,MAAM,GAAG,UAAUb,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,EAAE;EAE9DW,OAAO,CAACC,GAAG,CAACZ,MAAM,CAAC;EACnB,KAAI,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAC;IACxB,MAAMC,MAAM,GAAG,GAAGF,MAAM,IAAIC,CAAC,OAAO;IAEpChB,KAAK,CAACQ,GAAG,CAACS,MAAM,GAAC,OAAO,CAAC,CAACR,IAAI,CAAES,QAAQ,IAAK;MACzC,IAAIA,QAAQ,CAACR,IAAI,KAAK,OAAO,EAAE;QAC3BG,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;;QAE9B;QACA;QACA;QACA;QACA;QACA;QACA;QACA,OAAOG,MAAM,CAAC,CAAC;MACnB;IACJ,CAAC,CAAC,CAACN,KAAK,CAAEC,GAAG,IAAK,CAElB,CAAC,CAAC;EACN;EACAC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACpC,OAAO,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}