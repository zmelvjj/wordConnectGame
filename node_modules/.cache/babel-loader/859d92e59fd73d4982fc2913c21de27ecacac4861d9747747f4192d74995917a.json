{"ast":null,"code":"'use strict';\n\nvar multicastdns = require('multicast-dns');\nvar dnsEqual = require('dns-equal');\nvar flatten = require('array-flatten');\nvar deepEqual = require('deep-equal');\nmodule.exports = Server;\nfunction Server(opts) {\n  this.mdns = multicastdns(opts);\n  this.mdns.setMaxListeners(0);\n  this.registry = {};\n  this.mdns.on('query', this._respondToQuery.bind(this));\n}\nServer.prototype.register = function (records) {\n  var self = this;\n  if (Array.isArray(records)) records.forEach(register);else register(records);\n  function register(record) {\n    var subRegistry = self.registry[record.type];\n    if (!subRegistry) subRegistry = self.registry[record.type] = [];else if (subRegistry.some(isDuplicateRecord(record))) return;\n    subRegistry.push(record);\n  }\n};\nServer.prototype.unregister = function (records) {\n  var self = this;\n  if (Array.isArray(records)) records.forEach(unregister);else unregister(records);\n  function unregister(record) {\n    var type = record.type;\n    if (!(type in self.registry)) return;\n    self.registry[type] = self.registry[type].filter(function (r) {\n      return r.name !== record.name;\n    });\n  }\n};\nServer.prototype._respondToQuery = function (query) {\n  var self = this;\n  query.questions.forEach(function (question) {\n    var type = question.type;\n    var name = question.name;\n\n    // generate the answers section\n    var answers = type === 'ANY' ? flatten.depth(Object.keys(self.registry).map(self._recordsFor.bind(self, name)), 1) : self._recordsFor(name, type);\n    if (answers.length === 0) return;\n\n    // generate the additionals section\n    var additionals = [];\n    if (type !== 'ANY') {\n      answers.forEach(function (answer) {\n        if (answer.type !== 'PTR') return;\n        additionals = additionals.concat(self._recordsFor(answer.data, 'SRV')).concat(self._recordsFor(answer.data, 'TXT'));\n      });\n\n      // to populate the A and AAAA records, we need to get a set of unique\n      // targets from the SRV record\n      additionals.filter(function (record) {\n        return record.type === 'SRV';\n      }).map(function (record) {\n        return record.data.target;\n      }).filter(unique()).forEach(function (target) {\n        additionals = additionals.concat(self._recordsFor(target, 'A')).concat(self._recordsFor(target, 'AAAA'));\n      });\n    }\n    self.mdns.respond({\n      answers: answers,\n      additionals: additionals\n    }, function (err) {\n      if (err) throw err; // TODO: Handle this (if no callback is given, the error will be ignored)\n    });\n  });\n};\nServer.prototype._recordsFor = function (name, type) {\n  if (!(type in this.registry)) return [];\n  return this.registry[type].filter(function (record) {\n    var _name = ~name.indexOf('.') ? record.name : record.name.split('.')[0];\n    return dnsEqual(_name, name);\n  });\n};\nfunction isDuplicateRecord(a) {\n  return function (b) {\n    return a.type === b.type && a.name === b.name && deepEqual(a.data, b.data);\n  };\n}\nfunction unique() {\n  var set = [];\n  return function (obj) {\n    if (~set.indexOf(obj)) return false;\n    set.push(obj);\n    return true;\n  };\n}","map":{"version":3,"names":["multicastdns","require","dnsEqual","flatten","deepEqual","module","exports","Server","opts","mdns","setMaxListeners","registry","on","_respondToQuery","bind","prototype","register","records","self","Array","isArray","forEach","record","subRegistry","type","some","isDuplicateRecord","push","unregister","filter","r","name","query","questions","question","answers","depth","Object","keys","map","_recordsFor","length","additionals","answer","concat","data","target","unique","respond","err","_name","indexOf","split","a","b","set","obj"],"sources":["C:/Users/park0/Desktop/miniGamesProject/mgp-app/node_modules/bonjour/lib/mdns-server.js"],"sourcesContent":["'use strict'\n\nvar multicastdns = require('multicast-dns')\nvar dnsEqual = require('dns-equal')\nvar flatten = require('array-flatten')\nvar deepEqual = require('deep-equal')\n\nmodule.exports = Server\n\nfunction Server (opts) {\n  this.mdns = multicastdns(opts)\n  this.mdns.setMaxListeners(0)\n  this.registry = {}\n  this.mdns.on('query', this._respondToQuery.bind(this))\n}\n\nServer.prototype.register = function (records) {\n  var self = this\n\n  if (Array.isArray(records)) records.forEach(register)\n  else register(records)\n\n  function register (record) {\n    var subRegistry = self.registry[record.type]\n    if (!subRegistry) subRegistry = self.registry[record.type] = []\n    else if (subRegistry.some(isDuplicateRecord(record))) return\n    subRegistry.push(record)\n  }\n}\n\nServer.prototype.unregister = function (records) {\n  var self = this\n\n  if (Array.isArray(records)) records.forEach(unregister)\n  else unregister(records)\n\n  function unregister (record) {\n    var type = record.type\n    if (!(type in self.registry)) return\n    self.registry[type] = self.registry[type].filter(function (r) {\n      return r.name !== record.name\n    })\n  }\n}\n\nServer.prototype._respondToQuery = function (query) {\n  var self = this\n  query.questions.forEach(function (question) {\n    var type = question.type\n    var name = question.name\n\n    // generate the answers section\n    var answers = type === 'ANY'\n      ? flatten.depth(Object.keys(self.registry).map(self._recordsFor.bind(self, name)), 1)\n      : self._recordsFor(name, type)\n\n    if (answers.length === 0) return\n\n    // generate the additionals section\n    var additionals = []\n    if (type !== 'ANY') {\n      answers.forEach(function (answer) {\n        if (answer.type !== 'PTR') return\n        additionals = additionals\n          .concat(self._recordsFor(answer.data, 'SRV'))\n          .concat(self._recordsFor(answer.data, 'TXT'))\n      })\n\n      // to populate the A and AAAA records, we need to get a set of unique\n      // targets from the SRV record\n      additionals\n        .filter(function (record) {\n          return record.type === 'SRV'\n        })\n        .map(function (record) {\n          return record.data.target\n        })\n        .filter(unique())\n        .forEach(function (target) {\n          additionals = additionals\n            .concat(self._recordsFor(target, 'A'))\n            .concat(self._recordsFor(target, 'AAAA'))\n        })\n    }\n\n    self.mdns.respond({ answers: answers, additionals: additionals }, function (err) {\n      if (err) throw err // TODO: Handle this (if no callback is given, the error will be ignored)\n    })\n  })\n}\n\nServer.prototype._recordsFor = function (name, type) {\n  if (!(type in this.registry)) return []\n\n  return this.registry[type].filter(function (record) {\n    var _name = ~name.indexOf('.') ? record.name : record.name.split('.')[0]\n    return dnsEqual(_name, name)\n  })\n}\n\nfunction isDuplicateRecord (a) {\n  return function (b) {\n    return a.type === b.type &&\n      a.name === b.name &&\n      deepEqual(a.data, b.data)\n  }\n}\n\nfunction unique () {\n  var set = []\n  return function (obj) {\n    if (~set.indexOf(obj)) return false\n    set.push(obj)\n    return true\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}