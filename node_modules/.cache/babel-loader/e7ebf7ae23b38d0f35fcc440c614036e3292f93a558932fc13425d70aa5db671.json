{"ast":null,"code":"'use strict';\n\nvar dnsEqual = require('dns-equal');\nvar flatten = require('array-flatten');\nvar Service = require('./service');\nvar REANNOUNCE_MAX_MS = 60 * 60 * 1000;\nvar REANNOUNCE_FACTOR = 3;\nmodule.exports = Registry;\nfunction Registry(server) {\n  this._server = server;\n  this._services = [];\n}\nRegistry.prototype.publish = function (opts) {\n  var service = new Service(opts);\n  service.start = start.bind(service, this);\n  service.stop = stop.bind(service, this);\n  service.start({\n    probe: opts.probe !== false\n  });\n  return service;\n};\nRegistry.prototype.unpublishAll = function (cb) {\n  teardown(this._server, this._services, cb);\n  this._services = [];\n};\nRegistry.prototype.destroy = function () {\n  this._services.forEach(function (service) {\n    service._destroyed = true;\n  });\n};\nfunction start(registry, opts) {\n  if (this._activated) return;\n  this._activated = true;\n  registry._services.push(this);\n  if (opts.probe) {\n    var service = this;\n    probe(registry._server.mdns, this, function (exists) {\n      if (exists) {\n        service.stop();\n        service.emit('error', new Error('Service name is already in use on the network'));\n        return;\n      }\n      announce(registry._server, service);\n    });\n  } else {\n    announce(registry._server, this);\n  }\n}\nfunction stop(registry, cb) {\n  if (!this._activated) return; // TODO: What about the callback?\n\n  teardown(registry._server, this, cb);\n  var index = registry._services.indexOf(this);\n  if (index !== -1) registry._services.splice(index, 1);\n}\n\n/**\n * Check if a service name is already in use on the network.\n *\n * Used before announcing the new service.\n *\n * To guard against race conditions where multiple services are started\n * simultaneously on the network, wait a random amount of time (between\n * 0 and 250 ms) before probing.\n *\n * TODO: Add support for Simultaneous Probe Tiebreaking:\n * https://tools.ietf.org/html/rfc6762#section-8.2\n */\nfunction probe(mdns, service, cb) {\n  var sent = false;\n  var retries = 0;\n  var timer;\n  mdns.on('response', onresponse);\n  setTimeout(send, Math.random() * 250);\n  function send() {\n    // abort if the service have or is being stopped in the meantime\n    if (!service._activated || service._destroyed) return;\n    mdns.query(service.fqdn, 'ANY', function () {\n      // This function will optionally be called with an error object. We'll\n      // just silently ignore it and retry as we normally would\n      sent = true;\n      timer = setTimeout(++retries < 3 ? send : done, 250);\n      timer.unref();\n    });\n  }\n  function onresponse(packet) {\n    // Apparently conflicting Multicast DNS responses received *before*\n    // the first probe packet is sent MUST be silently ignored (see\n    // discussion of stale probe packets in RFC 6762 Section 8.2,\n    // \"Simultaneous Probe Tiebreaking\" at\n    // https://tools.ietf.org/html/rfc6762#section-8.2\n    if (!sent) return;\n    if (packet.answers.some(matchRR) || packet.additionals.some(matchRR)) done(true);\n  }\n  function matchRR(rr) {\n    return dnsEqual(rr.name, service.fqdn);\n  }\n  function done(exists) {\n    mdns.removeListener('response', onresponse);\n    clearTimeout(timer);\n    cb(!!exists);\n  }\n}\n\n/**\n * Initial service announcement\n *\n * Used to announce new services when they are first registered.\n *\n * Broadcasts right away, then after 3 seconds, 9 seconds, 27 seconds,\n * and so on, up to a maximum interval of one hour.\n */\nfunction announce(server, service) {\n  var delay = 1000;\n  var packet = service._records();\n  server.register(packet);\n  (function broadcast() {\n    // abort if the service have or is being stopped in the meantime\n    if (!service._activated || service._destroyed) return;\n    server.mdns.respond(packet, function () {\n      // This function will optionally be called with an error object. We'll\n      // just silently ignore it and retry as we normally would\n      if (!service.published) {\n        service._activated = true;\n        service.published = true;\n        service.emit('up');\n      }\n      delay = delay * REANNOUNCE_FACTOR;\n      if (delay < REANNOUNCE_MAX_MS && !service._destroyed) {\n        setTimeout(broadcast, delay).unref();\n      }\n    });\n  })();\n}\n\n/**\n * Stop the given services\n *\n * Besides removing a service from the mDNS registry, a \"goodbye\"\n * message is sent for each service to let the network know about the\n * shutdown.\n */\nfunction teardown(server, services, cb) {\n  if (!Array.isArray(services)) services = [services];\n  services = services.filter(function (service) {\n    return service._activated; // ignore services not currently starting or started\n  });\n  var records = flatten.depth(services.map(function (service) {\n    service._activated = false;\n    var records = service._records();\n    records.forEach(function (record) {\n      record.ttl = 0; // prepare goodbye message\n    });\n    return records;\n  }), 1);\n  if (records.length === 0) return cb && cb();\n  server.unregister(records);\n\n  // send goodbye message\n  server.mdns.respond(records, function () {\n    services.forEach(function (service) {\n      service.published = false;\n    });\n    if (cb) cb.apply(null, arguments);\n  });\n}","map":{"version":3,"names":["dnsEqual","require","flatten","Service","REANNOUNCE_MAX_MS","REANNOUNCE_FACTOR","module","exports","Registry","server","_server","_services","prototype","publish","opts","service","start","bind","stop","probe","unpublishAll","cb","teardown","destroy","forEach","_destroyed","registry","_activated","push","mdns","exists","emit","Error","announce","index","indexOf","splice","sent","retries","timer","on","onresponse","setTimeout","send","Math","random","query","fqdn","done","unref","packet","answers","some","matchRR","additionals","rr","name","removeListener","clearTimeout","delay","_records","register","broadcast","respond","published","services","Array","isArray","filter","records","depth","map","record","ttl","length","unregister","apply","arguments"],"sources":["C:/Users/park0/Desktop/miniGamesProject/mgp-app/node_modules/bonjour/lib/registry.js"],"sourcesContent":["'use strict'\n\nvar dnsEqual = require('dns-equal')\nvar flatten = require('array-flatten')\nvar Service = require('./service')\n\nvar REANNOUNCE_MAX_MS = 60 * 60 * 1000\nvar REANNOUNCE_FACTOR = 3\n\nmodule.exports = Registry\n\nfunction Registry (server) {\n  this._server = server\n  this._services = []\n}\n\nRegistry.prototype.publish = function (opts) {\n  var service = new Service(opts)\n  service.start = start.bind(service, this)\n  service.stop = stop.bind(service, this)\n  service.start({ probe: opts.probe !== false })\n  return service\n}\n\nRegistry.prototype.unpublishAll = function (cb) {\n  teardown(this._server, this._services, cb)\n  this._services = []\n}\n\nRegistry.prototype.destroy = function () {\n  this._services.forEach(function (service) {\n    service._destroyed = true\n  })\n}\n\nfunction start (registry, opts) {\n  if (this._activated) return\n  this._activated = true\n\n  registry._services.push(this)\n\n  if (opts.probe) {\n    var service = this\n    probe(registry._server.mdns, this, function (exists) {\n      if (exists) {\n        service.stop()\n        service.emit('error', new Error('Service name is already in use on the network'))\n        return\n      }\n      announce(registry._server, service)\n    })\n  } else {\n    announce(registry._server, this)\n  }\n}\n\nfunction stop (registry, cb) {\n  if (!this._activated) return // TODO: What about the callback?\n\n  teardown(registry._server, this, cb)\n\n  var index = registry._services.indexOf(this)\n  if (index !== -1) registry._services.splice(index, 1)\n}\n\n/**\n * Check if a service name is already in use on the network.\n *\n * Used before announcing the new service.\n *\n * To guard against race conditions where multiple services are started\n * simultaneously on the network, wait a random amount of time (between\n * 0 and 250 ms) before probing.\n *\n * TODO: Add support for Simultaneous Probe Tiebreaking:\n * https://tools.ietf.org/html/rfc6762#section-8.2\n */\nfunction probe (mdns, service, cb) {\n  var sent = false\n  var retries = 0\n  var timer\n\n  mdns.on('response', onresponse)\n  setTimeout(send, Math.random() * 250)\n\n  function send () {\n    // abort if the service have or is being stopped in the meantime\n    if (!service._activated || service._destroyed) return\n\n    mdns.query(service.fqdn, 'ANY', function () {\n      // This function will optionally be called with an error object. We'll\n      // just silently ignore it and retry as we normally would\n      sent = true\n      timer = setTimeout(++retries < 3 ? send : done, 250)\n      timer.unref()\n    })\n  }\n\n  function onresponse (packet) {\n    // Apparently conflicting Multicast DNS responses received *before*\n    // the first probe packet is sent MUST be silently ignored (see\n    // discussion of stale probe packets in RFC 6762 Section 8.2,\n    // \"Simultaneous Probe Tiebreaking\" at\n    // https://tools.ietf.org/html/rfc6762#section-8.2\n    if (!sent) return\n\n    if (packet.answers.some(matchRR) || packet.additionals.some(matchRR)) done(true)\n  }\n\n  function matchRR (rr) {\n    return dnsEqual(rr.name, service.fqdn)\n  }\n\n  function done (exists) {\n    mdns.removeListener('response', onresponse)\n    clearTimeout(timer)\n    cb(!!exists)\n  }\n}\n\n/**\n * Initial service announcement\n *\n * Used to announce new services when they are first registered.\n *\n * Broadcasts right away, then after 3 seconds, 9 seconds, 27 seconds,\n * and so on, up to a maximum interval of one hour.\n */\nfunction announce (server, service) {\n  var delay = 1000\n  var packet = service._records()\n\n  server.register(packet)\n\n  ;(function broadcast () {\n    // abort if the service have or is being stopped in the meantime\n    if (!service._activated || service._destroyed) return\n\n    server.mdns.respond(packet, function () {\n      // This function will optionally be called with an error object. We'll\n      // just silently ignore it and retry as we normally would\n      if (!service.published) {\n        service._activated = true\n        service.published = true\n        service.emit('up')\n      }\n      delay = delay * REANNOUNCE_FACTOR\n      if (delay < REANNOUNCE_MAX_MS && !service._destroyed) {\n        setTimeout(broadcast, delay).unref()\n      }\n    })\n  })()\n}\n\n/**\n * Stop the given services\n *\n * Besides removing a service from the mDNS registry, a \"goodbye\"\n * message is sent for each service to let the network know about the\n * shutdown.\n */\nfunction teardown (server, services, cb) {\n  if (!Array.isArray(services)) services = [services]\n\n  services = services.filter(function (service) {\n    return service._activated // ignore services not currently starting or started\n  })\n\n  var records = flatten.depth(services.map(function (service) {\n    service._activated = false\n    var records = service._records()\n    records.forEach(function (record) {\n      record.ttl = 0 // prepare goodbye message\n    })\n    return records\n  }), 1)\n\n  if (records.length === 0) return cb && cb()\n\n  server.unregister(records)\n\n  // send goodbye message\n  server.mdns.respond(records, function () {\n    services.forEach(function (service) {\n      service.published = false\n    })\n    if (cb) cb.apply(null, arguments)\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}