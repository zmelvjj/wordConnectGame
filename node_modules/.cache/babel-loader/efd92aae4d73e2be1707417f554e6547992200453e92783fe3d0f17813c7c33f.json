{"ast":null,"code":"'use strict';\n\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar serviceName = require('multicast-dns-service-types');\nvar dnsEqual = require('dns-equal');\nvar dnsTxt = require('dns-txt');\nvar TLD = '.local';\nvar WILDCARD = '_services._dns-sd._udp' + TLD;\nmodule.exports = Browser;\nutil.inherits(Browser, EventEmitter);\n\n/**\n * Start a browser\n *\n * The browser listens for services by querying for PTR records of a given\n * type, protocol and domain, e.g. _http._tcp.local.\n *\n * If no type is given, a wild card search is performed.\n *\n * An internal list of online services is kept which starts out empty. When\n * ever a new service is discovered, it's added to the list and an \"up\" event\n * is emitted with that service. When it's discovered that the service is no\n * longer available, it is removed from the list and a \"down\" event is emitted\n * with that service.\n */\nfunction Browser(mdns, opts, onup) {\n  if (typeof opts === 'function') return new Browser(mdns, null, opts);\n  EventEmitter.call(this);\n  this._mdns = mdns;\n  this._onresponse = null;\n  this._serviceMap = {};\n  this._txt = dnsTxt(opts.txt);\n  if (!opts || !opts.type) {\n    this._name = WILDCARD;\n    this._wildcard = true;\n  } else {\n    this._name = serviceName.stringify(opts.type, opts.protocol || 'tcp') + TLD;\n    if (opts.name) this._name = opts.name + '.' + this._name;\n    this._wildcard = false;\n  }\n  this.services = [];\n  if (onup) this.on('up', onup);\n  this.start();\n}\nBrowser.prototype.start = function () {\n  if (this._onresponse) return;\n  var self = this;\n\n  // List of names for the browser to listen for. In a normal search this will\n  // be the primary name stored on the browser. In case of a wildcard search\n  // the names will be determined at runtime as responses come in.\n  var nameMap = {};\n  if (!this._wildcard) nameMap[this._name] = true;\n  this._onresponse = function (packet, rinfo) {\n    if (self._wildcard) {\n      packet.answers.forEach(function (answer) {\n        if (answer.type !== 'PTR' || answer.name !== self._name || answer.name in nameMap) return;\n        nameMap[answer.data] = true;\n        self._mdns.query(answer.data, 'PTR');\n      });\n    }\n    Object.keys(nameMap).forEach(function (name) {\n      // unregister all services shutting down\n      goodbyes(name, packet).forEach(self._removeService.bind(self));\n\n      // register all new services\n      var matches = buildServicesFor(name, packet, self._txt, rinfo);\n      if (matches.length === 0) return;\n      matches.forEach(function (service) {\n        if (self._serviceMap[service.fqdn]) return; // ignore already registered services\n        self._addService(service);\n      });\n    });\n  };\n  this._mdns.on('response', this._onresponse);\n  this.update();\n};\nBrowser.prototype.stop = function () {\n  if (!this._onresponse) return;\n  this._mdns.removeListener('response', this._onresponse);\n  this._onresponse = null;\n};\nBrowser.prototype.update = function () {\n  this._mdns.query(this._name, 'PTR');\n};\nBrowser.prototype._addService = function (service) {\n  this.services.push(service);\n  this._serviceMap[service.fqdn] = true;\n  this.emit('up', service);\n};\nBrowser.prototype._removeService = function (fqdn) {\n  var service, index;\n  this.services.some(function (s, i) {\n    if (dnsEqual(s.fqdn, fqdn)) {\n      service = s;\n      index = i;\n      return true;\n    }\n  });\n  if (!service) return;\n  this.services.splice(index, 1);\n  delete this._serviceMap[fqdn];\n  this.emit('down', service);\n};\n\n// PTR records with a TTL of 0 is considered a \"goodbye\" announcement. I.e. a\n// DNS response broadcasted when a service shuts down in order to let the\n// network know that the service is no longer going to be available.\n//\n// For more info see:\n// https://tools.ietf.org/html/rfc6762#section-8.4\n//\n// This function returns an array of all resource records considered a goodbye\n// record\nfunction goodbyes(name, packet) {\n  return packet.answers.concat(packet.additionals).filter(function (rr) {\n    return rr.type === 'PTR' && rr.ttl === 0 && dnsEqual(rr.name, name);\n  }).map(function (rr) {\n    return rr.data;\n  });\n}\nfunction buildServicesFor(name, packet, txt, referer) {\n  var records = packet.answers.concat(packet.additionals).filter(function (rr) {\n    return rr.ttl > 0; // ignore goodbye messages\n  });\n  return records.filter(function (rr) {\n    return rr.type === 'PTR' && dnsEqual(rr.name, name);\n  }).map(function (ptr) {\n    var service = {\n      addresses: []\n    };\n    records.filter(function (rr) {\n      return (rr.type === 'SRV' || rr.type === 'TXT') && dnsEqual(rr.name, ptr.data);\n    }).forEach(function (rr) {\n      if (rr.type === 'SRV') {\n        var parts = rr.name.split('.');\n        var name = parts[0];\n        var types = serviceName.parse(parts.slice(1, -1).join('.'));\n        service.name = name;\n        service.fqdn = rr.name;\n        service.host = rr.data.target;\n        service.referer = referer;\n        service.port = rr.data.port;\n        service.type = types.name;\n        service.protocol = types.protocol;\n        service.subtypes = types.subtypes;\n      } else if (rr.type === 'TXT') {\n        service.rawTxt = rr.data;\n        service.txt = txt.decode(rr.data);\n      }\n    });\n    if (!service.name) return;\n    records.filter(function (rr) {\n      return (rr.type === 'A' || rr.type === 'AAAA') && dnsEqual(rr.name, service.host);\n    }).forEach(function (rr) {\n      service.addresses.push(rr.data);\n    });\n    return service;\n  }).filter(function (rr) {\n    return !!rr;\n  });\n}","map":{"version":3,"names":["util","require","EventEmitter","serviceName","dnsEqual","dnsTxt","TLD","WILDCARD","module","exports","Browser","inherits","mdns","opts","onup","call","_mdns","_onresponse","_serviceMap","_txt","txt","type","_name","_wildcard","stringify","protocol","name","services","on","start","prototype","self","nameMap","packet","rinfo","answers","forEach","answer","data","query","Object","keys","goodbyes","_removeService","bind","matches","buildServicesFor","length","service","fqdn","_addService","update","stop","removeListener","push","emit","index","some","s","i","splice","concat","additionals","filter","rr","ttl","map","referer","records","ptr","addresses","parts","split","types","parse","slice","join","host","target","port","subtypes","rawTxt","decode"],"sources":["C:/Users/park0/Desktop/miniGamesProject/mgp-app/node_modules/bonjour/lib/browser.js"],"sourcesContent":["'use strict'\n\nvar util = require('util')\nvar EventEmitter = require('events').EventEmitter\nvar serviceName = require('multicast-dns-service-types')\nvar dnsEqual = require('dns-equal')\nvar dnsTxt = require('dns-txt')\n\nvar TLD = '.local'\nvar WILDCARD = '_services._dns-sd._udp' + TLD\n\nmodule.exports = Browser\n\nutil.inherits(Browser, EventEmitter)\n\n/**\n * Start a browser\n *\n * The browser listens for services by querying for PTR records of a given\n * type, protocol and domain, e.g. _http._tcp.local.\n *\n * If no type is given, a wild card search is performed.\n *\n * An internal list of online services is kept which starts out empty. When\n * ever a new service is discovered, it's added to the list and an \"up\" event\n * is emitted with that service. When it's discovered that the service is no\n * longer available, it is removed from the list and a \"down\" event is emitted\n * with that service.\n */\nfunction Browser (mdns, opts, onup) {\n  if (typeof opts === 'function') return new Browser(mdns, null, opts)\n\n  EventEmitter.call(this)\n\n  this._mdns = mdns\n  this._onresponse = null\n  this._serviceMap = {}\n  this._txt = dnsTxt(opts.txt)\n\n  if (!opts || !opts.type) {\n    this._name = WILDCARD\n    this._wildcard = true\n  } else {\n    this._name = serviceName.stringify(opts.type, opts.protocol || 'tcp') + TLD\n    if (opts.name) this._name = opts.name + '.' + this._name\n    this._wildcard = false\n  }\n\n  this.services = []\n\n  if (onup) this.on('up', onup)\n\n  this.start()\n}\n\nBrowser.prototype.start = function () {\n  if (this._onresponse) return\n\n  var self = this\n\n  // List of names for the browser to listen for. In a normal search this will\n  // be the primary name stored on the browser. In case of a wildcard search\n  // the names will be determined at runtime as responses come in.\n  var nameMap = {}\n  if (!this._wildcard) nameMap[this._name] = true\n\n  this._onresponse = function (packet, rinfo) {\n    if (self._wildcard) {\n      packet.answers.forEach(function (answer) {\n        if (answer.type !== 'PTR' || answer.name !== self._name || answer.name in nameMap) return\n        nameMap[answer.data] = true\n        self._mdns.query(answer.data, 'PTR')\n      })\n    }\n\n    Object.keys(nameMap).forEach(function (name) {\n      // unregister all services shutting down\n      goodbyes(name, packet).forEach(self._removeService.bind(self))\n\n      // register all new services\n      var matches = buildServicesFor(name, packet, self._txt, rinfo)\n      if (matches.length === 0) return\n\n      matches.forEach(function (service) {\n        if (self._serviceMap[service.fqdn]) return // ignore already registered services\n        self._addService(service)\n      })\n    })\n  }\n\n  this._mdns.on('response', this._onresponse)\n  this.update()\n}\n\nBrowser.prototype.stop = function () {\n  if (!this._onresponse) return\n\n  this._mdns.removeListener('response', this._onresponse)\n  this._onresponse = null\n}\n\nBrowser.prototype.update = function () {\n  this._mdns.query(this._name, 'PTR')\n}\n\nBrowser.prototype._addService = function (service) {\n  this.services.push(service)\n  this._serviceMap[service.fqdn] = true\n  this.emit('up', service)\n}\n\nBrowser.prototype._removeService = function (fqdn) {\n  var service, index\n  this.services.some(function (s, i) {\n    if (dnsEqual(s.fqdn, fqdn)) {\n      service = s\n      index = i\n      return true\n    }\n  })\n  if (!service) return\n  this.services.splice(index, 1)\n  delete this._serviceMap[fqdn]\n  this.emit('down', service)\n}\n\n// PTR records with a TTL of 0 is considered a \"goodbye\" announcement. I.e. a\n// DNS response broadcasted when a service shuts down in order to let the\n// network know that the service is no longer going to be available.\n//\n// For more info see:\n// https://tools.ietf.org/html/rfc6762#section-8.4\n//\n// This function returns an array of all resource records considered a goodbye\n// record\nfunction goodbyes (name, packet) {\n  return packet.answers.concat(packet.additionals)\n    .filter(function (rr) {\n      return rr.type === 'PTR' && rr.ttl === 0 && dnsEqual(rr.name, name)\n    })\n    .map(function (rr) {\n      return rr.data\n    })\n}\n\nfunction buildServicesFor (name, packet, txt, referer) {\n  var records = packet.answers.concat(packet.additionals).filter(function (rr) {\n    return rr.ttl > 0 // ignore goodbye messages\n  })\n\n  return records\n    .filter(function (rr) {\n      return rr.type === 'PTR' && dnsEqual(rr.name, name)\n    })\n    .map(function (ptr) {\n      var service = {\n        addresses: []\n      }\n\n      records\n        .filter(function (rr) {\n          return (rr.type === 'SRV' || rr.type === 'TXT') && dnsEqual(rr.name, ptr.data)\n        })\n        .forEach(function (rr) {\n          if (rr.type === 'SRV') {\n            var parts = rr.name.split('.')\n            var name = parts[0]\n            var types = serviceName.parse(parts.slice(1, -1).join('.'))\n            service.name = name\n            service.fqdn = rr.name\n            service.host = rr.data.target\n            service.referer = referer\n            service.port = rr.data.port\n            service.type = types.name\n            service.protocol = types.protocol\n            service.subtypes = types.subtypes\n          } else if (rr.type === 'TXT') {\n            service.rawTxt = rr.data\n            service.txt = txt.decode(rr.data)\n          }\n        })\n\n      if (!service.name) return\n\n      records\n        .filter(function (rr) {\n          return (rr.type === 'A' || rr.type === 'AAAA') && dnsEqual(rr.name, service.host)\n        })\n        .forEach(function (rr) {\n          service.addresses.push(rr.data)\n        })\n\n      return service\n    })\n    .filter(function (rr) {\n      return !!rr\n    })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}