{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\park0\\\\Desktop\\\\miniGamesProject\\\\mgp-app\\\\src\\\\Main.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Main.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [data, Setdata] = useState([\"\", 0]);\n  const navigate = useNavigate();\n  const mainData = async () => {\n    const chagePageinMain = fetch => {\n      navigate('/' + fetch); //경로 이동\n    };\n    try {\n      const res = await fetch(\"http://localhost:1234/getData\", {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          request: \"getData\"\n        }) // JSON 형식으로 수정\n      });\n      const Data = await res.json();\n\n      //-----순위 정렬화--------\n      const userArray = Object.keys(Data).map(key => ({\n        ...Data[key],\n        rank: 0 // 초기 순위\n      }));\n\n      // 점수에 따라 배열 정렬\n      userArray.sort((a, b) => b.Point - a.Point);\n\n      // 순위 매기기\n      userArray.forEach((user, index) => {\n        user.rank = index + 1;\n        Setdata([user.Username, user.rank]);\n      });\n    } catch (err) {\n      console.log(\"ERROR:\", err);\n    }\n  };\n  console.log(data);\n  useEffect(() => {\n    mainData();\n    console.log(\"Render\");\n  }, []); // 빈 배열을 두 번째 인자로 전달하여 컴포넌트가 마운트될 때 한 번만 실행되도록 함\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"scoreBorde\",\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [data[0], \"\\uC810\\uC218:\", data[2]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"5puwn4I34BUI31r92wu8h4pq070=\", false, function () {\n  return [useNavigate];\n});\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","Main","_s","data","Setdata","navigate","mainData","chagePageinMain","fetch","res","method","mode","headers","body","JSON","stringify","request","Data","json","userArray","Object","keys","map","key","rank","sort","a","b","Point","forEach","user","index","Username","err","console","log","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/park0/Desktop/miniGamesProject/mgp-app/src/Main.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./Main.css\"\r\n\r\nconst Main: React.FC = () => {\r\n    const [data,Setdata] = useState([\"\",0]);\r\n    const navigate = useNavigate();\r\n\r\n    const mainData = async () => {\r\n        const chagePageinMain = (fetch:string) => {\r\n            navigate('/'+fetch); //경로 이동\r\n        };\r\n\r\n        try {\r\n            const res = await fetch(\"http://localhost:1234/getData\", {\r\n                method: \"POST\",\r\n                mode: \"cors\",\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ request: \"getData\" }) // JSON 형식으로 수정\r\n            });\r\n\r\n            const Data = await res.json();\r\n            \r\n            //-----순위 정렬화--------\r\n            const userArray = Object.keys(Data).map(key => ({\r\n                ...Data[key],\r\n                rank: 0, // 초기 순위\r\n            }));\r\n            \r\n            // 점수에 따라 배열 정렬\r\n            userArray.sort((a, b) => b.Point - a.Point);\r\n            \r\n            // 순위 매기기\r\n            userArray.forEach((user, index) => {\r\n                user.rank = index + 1;\r\n                Setdata([user.Username,user.rank])\r\n            });\r\n\r\n        } catch (err) {\r\n            console.log(\"ERROR:\", err);\r\n        }\r\n    };\r\n    console.log(data)\r\n\r\n    useEffect(() => {\r\n        mainData();\r\n        console.log(\"Render\")\r\n    }, []); // 빈 배열을 두 번째 인자로 전달하여 컴포넌트가 마운트될 때 한 번만 실행되도록 함\r\n\r\n    return (\r\n        <div className=\"background\">\r\n            <h1 id=\"scoreBorde\"><pre>\r\n                {data[0]}\r\n                점수:{data[2]}\r\n            </pre></h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,IAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC;EACvC,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9B,MAAMQ,QAAQ,GAAG,MAAAA,CAAA,KAAY;IACzB,MAAMC,eAAe,GAAIC,KAAY,IAAK;MACtCH,QAAQ,CAAC,GAAG,GAACG,KAAK,CAAC,CAAC,CAAC;IACzB,CAAC;IAED,IAAI;MACA,MAAMC,GAAG,GAAG,MAAMD,KAAK,CAAC,+BAA+B,EAAE;QACrDE,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAE;QAAU,CAAC,CAAC,CAAC;MACjD,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;;MAE7B;MACA,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,CAACK,GAAG,CAACC,GAAG,KAAK;QAC5C,GAAGN,IAAI,CAACM,GAAG,CAAC;QACZC,IAAI,EAAE,CAAC,CAAE;MACb,CAAC,CAAC,CAAC;;MAEH;MACAL,SAAS,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,KAAK,GAAGF,CAAC,CAACE,KAAK,CAAC;;MAE3C;MACAT,SAAS,CAACU,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;QAC/BD,IAAI,CAACN,IAAI,GAAGO,KAAK,GAAG,CAAC;QACrB3B,OAAO,CAAC,CAAC0B,IAAI,CAACE,QAAQ,EAACF,IAAI,CAACN,IAAI,CAAC,CAAC;MACtC,CAAC,CAAC;IAEN,CAAC,CAAC,OAAOS,GAAG,EAAE;MACVC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,GAAG,CAAC;IAC9B;EACJ,CAAC;EACDC,OAAO,CAACC,GAAG,CAAChC,IAAI,CAAC;EAEjBP,SAAS,CAAC,MAAM;IACZU,QAAQ,CAAC,CAAC;IACV4B,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACInC,OAAA;IAAKoC,SAAS,EAAC,YAAY;IAAAC,QAAA,eACvBrC,OAAA;MAAIsC,EAAE,EAAC,YAAY;MAAAD,QAAA,eAACrC,OAAA;QAAAqC,QAAA,GACflC,IAAI,CAAC,CAAC,CAAC,EAAC,eACN,EAACA,IAAI,CAAC,CAAC,CAAC;MAAA;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEd,CAAC;AAACxC,EAAA,CAvDID,IAAc;EAAA,QAECH,WAAW;AAAA;AAAA6C,EAAA,GAF1B1C,IAAc;AAyDpB,eAAeA,IAAI;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}